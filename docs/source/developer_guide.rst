.. _developer_guide:

Project Code Overview
=====================

After installing the virtual environment as described in the :ref:`Project
Overview <project_overview>` setup your IDE to use the virtual
environment generated by Poetry. It is commonly found under
``recommender/venv/recommender``.

Adding a new Metric
-------------------

The metric needs to be able to handle tensors to be compatible with
pytorch.

To implement it go to
`metrics/ranking\_metrics <../asme/metrics/ranking_metrics.py>`__ and
implement a new metrics class.

Adding a new Data set
---------------------

In order to implement a new dataset, you have to teach ASME how to download, preprocess and index your data. You can do this by defining a preprocessing configuration provider:

.. code-block::

    def get_my_dataset_preprocessing_config(output_dir: Path, ...) -> DatasetPreprocessingConfig:
        ...

This function should return a `DatasetPreprocessingConfig` instance that contains the following data:

- name: The name that will be used to identify files of your dataset.
- url (Optional): Specifies where your dataset should be downloaded from. If this is not set you have to specify the input directory via the context object below by setting the `INPUT_DIR_KEY`.
- location: Path Specifies where the final dataset will reside.
- unpacker (Optinal): An Unpacker instance (e.g. Unzipper) that is used to unpack your dataset.
- preprocessing_actions (Optional): A list of `PreprocessingActions` that should be applied to your dataset.
- context (Optional): The `Context` instance that will be passed between preprocessing actions. You can pre-specify keys such as `DELIMITER_KEY` or `INPUT_DIR_KEY` here.

For an example of how to implement a preprocessing configuration provider, refer to `data/datasets/config.py <../asme/data/dataset/config.py>`__ .

Since you usually want to have default values for many of the parameters to your preprocessing configuration provider, we wrap the function into a `PreprocessingConfigProvider` which can hold default values for any of the parameters of your function.
Additionally, you have to register your provider with ASME such that you can refer to your dataset in configuration files run by ASME. To do so, you have to call `register_preprocessing_config_provider` as follows:

.. code-block::

    register_preprocessing_config_provider(PreprocessingConfigProvider("my_dataset", get_my_dataset_preprocessing_config,
        my_param_1=default_value_1,
        my_param_5=default_value_5,
        ...,
        )
    )

You will then be able to refer to your dataset via the name passed to the function call above (e.g. "my_dataset" in this case).


Adding a new Model
------------------

In order to add a new model multiple things need to be implemented:

1. The model itself as a pytorch model in `models <../asme/models>`__
2. A pytorch lightning module that wraps the torch implementation of your newly implemented model in `modules <../asme/modules>`__
3. A configuration container in `runner/util/containers <../asme/runner/util/containers.py>`__ and the respective connection in `runner/run\_model <../asme/runner/run_model.py>`__

Things that are not Documented
------------------------------

This section lists areas of the project that are not documented/need
code comments:

- Contents of the "support-code" in `runner/util <../asme/runner/util>`__
- Most methods, classes, and modules

Refactor proposals
------------------

-  The predition logger callback for pytorch lightning is contained in
   `runner/util <../asme/runner/util>`__ (I [AL] would expect this to be
   at `logger <./../logger>`__)
-  The code in `runner/util <../asme/runner/util>`__ is quite extensive
   and should probably be moved into multiple separate directories (e.g.
   `runner/util/containers <../asme/runner/util/containers.py>`__ could
   be a directory)
-  Every directory deserves its own little README.md describing its
   purpose, contents, and implementation hints in a few sentences
-  If this project aims to become a CLI one day the project structure
   should represent that by:

   -  Either: directories should be structured into commands
   -  Or: An app directory should be created in which commands are
      defined and registered at one central file

-  If a class is defined in a file the file should have the same name as
   the class (e.g., `indexer.py <./../data/base/indexer.py>`__ defines
   the CsvSessionIndexer class)
-  If a file defines multiple classes make it a directory.
-  Rename `dm <./../dm>`__ to datamodules or remove it

After installing the virtual environment as described in the :ref:`Project Overview <project_overview>`, setup your IDE to use the virtual
environment generated by Poetry. It is commonly found under ``recommender/venv/recommender``.

The project is structured into the following folders:

- `configs <https://gitlab2.informatik.uni-wuerzburg.de/dmir/dallmann/recommender/-/tree/master/configs>`__: Contains yaml files which are needed to configure the uses of models in conjunction with metrics and data sets
- `docs <https://gitlab2.informatik.uni-wuerzburg.de/dmir/dallmann/recommender/-/tree/master/docs>`__: Contains rst files which contain the documentation for this project
- `k8s <https://gitlab2.informatik.uni-wuerzburg.de/dmir/dallmann/recommender/-/tree/master/k8s>`__: Contains a dockerfile which defines a docker container which runs a model when started, an example for a kubernetes job and pod configuration for said dockerfile
- `src/asme <https://gitlab2.informatik.uni-wuerzburg.de/dmir/dallmann/recommender/-/tree/master/src/asme>`__: Contains all code
    - `core <https://gitlab2.informatik.uni-wuerzburg.de/dmir/dallmann/recommender/-/tree/master/src/asme/core>`__: Contains the source code and the main method
        - `callbacks <https://gitlab2.informatik.uni-wuerzburg.de/dmir/dallmann/recommender/-/tree/master/src/asme/callbacks>`__: Contains code for tracking the best model
        - `init <https://gitlab2.informatik.uni-wuerzburg.de/dmir/dallmann/recommender/-/tree/master/src/asme/init>`__: Contains code regarding the model initialization
        - `losses <https://gitlab2.informatik.uni-wuerzburg.de/dmir/dallmann/recommender/-/tree/master/src/asme/losses>`__: Contains code regarding custom loss functions which can be integrated into pytorch training
        - `metrics <https://gitlab2.informatik.uni-wuerzburg.de/dmir/dallmann/recommender/-/tree/master/src/asme/metrics>`__: Contains code regarding the implementation of recommendation metrics which are integrated using pytorch
        - `models <https://gitlab2.informatik.uni-wuerzburg.de/dmir/dallmann/recommender/-/tree/master/src/asme/models>`__: Contains pytorch implementations of the models provided by this framework
        - `modules <https://gitlab2.informatik.uni-wuerzburg.de/dmir/dallmann/recommender/-/tree/master/src/asme/modules>`__: Contains pytorch-lightning wrappers for the pytorch models defined in `models <https://gitlab2.informatik.uni-wuerzburg.de/dmir/dallmann/recommender/-/tree/master/src/asme/models>`__
        - `tokenization <https://gitlab2.informatik.uni-wuerzburg.de/dmir/dallmann/recommender/-/tree/master/src/asme/tokenization>`__: Contains code concerning the tokenization of session items and the building of a vocabulary for data sets
        - `utils <https://gitlab2.informatik.uni-wuerzburg.de/dmir/dallmann/recommender/-/tree/master/src/asme/utils>`__: Contains utils code for the project
        - `writer <https://gitlab2.informatik.uni-wuerzburg.de/dmir/dallmann/recommender/-/tree/master/src/asme/writer>`__: Contains the writer interfaces for prediction and results
    - `data <https://gitlab2.informatik.uni-wuerzburg.de/dmir/dallmann/recommender/-/tree/master/src/asme/data>`__: Contains code regarding the indexing of data sets and reading of stored indices
        - `base <https://gitlab2.informatik.uni-wuerzburg.de/dmir/dallmann/recommender/-/tree/master/src/asme/data/base>`__: Contains code regarding csv processing
        - `datamodule <https://gitlab2.informatik.uni-wuerzburg.de/dmir/dallmann/recommender/-/tree/master/src/asme/data/datamodule>`__: Contains code regarding the integration of data sets into the framework
        - `datasets <https://gitlab2.informatik.uni-wuerzburg.de/dmir/dallmann/recommender/-/tree/master/src/asme/data/datasets>`__: Contains code regarding ?
        - `utils <https://gitlab2.informatik.uni-wuerzburg.de/dmir/dallmann/recommender/-/tree/master/src/asme/data/utils>`__: Contains code regarding ?
- `tests <https://gitlab2.informatik.uni-wuerzburg.de/dmir/dallmann/recommender/-/tree/master/tests>`__: Contains unit tests for the project. Also contains an example data set as well as the respective vocabulary and index file

The project already contains a variety of implemented code, models and datasets. You can find further information on how to import your own work :ref:`here <config imports>` .