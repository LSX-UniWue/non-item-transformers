Project Code Overview
=====================

After installing the virtual environment as described in the `Project
Overview <./project_overview.md>`__ setup your IDE to use the virtual
enviroment generated by Poetry. It is commonly found under
``recommender/venv/recommender``.

The project is structured into 14 folders:

- `data <./../data>`__: Contains code regarding the indexing of data sets and reading of stored indices

- `dataset <../datasets>`__: Contains code regarding the integration of data sets into the framework
- `dm <./../dm>`__: Contains code for the use of the dota data set as a pytorch lightning data module
- `docs <./../docs>`__: Contains Markdown files which contain the documentation for this project
- `k8s <./../k8s>`__: Contains a dockerfile which defines a docker container which runs a model when started, an example for a kubernetes job and pod configuration for said dockerfile.
- `logger <./../logger>`__: Contains code for the logging of pytorch training loss and pytorch training metrics
- `losses <../asme/losses>`__: Contains code regarding custom loss functions which can be integrated into pytorch training
- `metrics <../asme/metrics>`__: Contains code reagarding the implementation of recommendation metrics which are integrated using pytorch
- `models <../asme/models>`__: Contains pytorch implementations of the models provided by this framework
- `modules <../asme/modules>`__: Contains pytorch-lightning wrappers for the pytorch models defined in `models <../asme/models>`__
- `projects <../configs>`__: Contains yaml files which are needed to configure the uses of models in conjunction with metrics and data sets.
- `runner <../asme/runner>`__: Also contains Typer-CLI implementation for indexing data sets, but also the Typer-CLI implementation for training a model and performing predictions with it, as well as necessary support-code
- `tests <./../tests>`__: Contains unit tests for the project. Also contains an example data set as well as the respective vocabulary and index file
- `tokenization <../asme/tokenization>`__: Contains code concerning the tokenization of session items and the building of a vocabulary for data sets.

Adding a new Metric
-------------------

The metric needs to be able to handle tensors to be compatible with
pytorch.

To implement it go to
`metrics/ranking\_metrics <../asme/metrics/ranking_metrics.py>`__ and
implement a new metrics class.

Adding a new Data set
---------------------

All Necessary Files for the integration of data sets can be found under
the `dataset folder <../datasets>`__.

In order to add a new dataset and make it usable you have to implement
the following steps:

1. Download the data set or document where it is available
2. Index the data set and create train, validation, test split
3. Create a vocabulary for the data set
4. Integrate those steps into the dataset `Typer <https://typer.tiangolo.com/>`__ CLI as a new command under `dataset/app/data\_set\_commands.py <../datasets/app/data_set_commands.py>`__

Adding a new Model
------------------

In order to add a new model multiple things need to be implemented:

1. The model itself as a pytorch model in `models <../asme/models>`__
2. A pytorch lightning module that wraps the torch implementation of your newly implemented model in `modules <../asme/modules>`__
3. A configuration container in `runner/util/containers <../asme/runner/util/containers.py>`__ and the respective connection in `runner/run\_model <../asme/runner/run_model.py>`__

Things that are not Documented
------------------------------

This section lists areas of the project that are not documented/need
code comments:

- Contents of the "support-code" in `runner/util <../asme/runner/util>`__
- Most methods, classes, and modules

Refactor proposals
------------------

-  The predition logger callback for pytorch lightning is contained in
   `runner/util <../asme/runner/util>`__ (I [AL] would expect this to be
   at `logger <./../logger>`__)
-  The code in `runner/util <../asme/runner/util>`__ is quite extensive
   and should probably be moved into multiple separate directories (e.g.
   `runner/util/containers <../asme/runner/util/containers.py>`__ could
   be a directory)
-  Every directory deserves its own little README.md describing its
   purpose, contents, and implementation hints in a few sentences
-  If this project aims to become a CLI one day the project structure
   should represent that by:

   -  Either: directories should be structured into commands
   -  Or: An app directory should be created in which commands are
      defined and registered at one central file

-  If a class is defined in a file the file should have the same name as
   the class (e.g., `indexer.py <./../data/base/indexer.py>`__ defines
   the CsvSessionIndexer class)
-  If a file defines multiple classes make it a directory.
-  Rename `dm <./../dm>`__ to datamodules or remove it

